# Generated by Django 3.1.2 on 2021-06-10 18:32

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import music.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Album',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Album title', max_length=200)),
                ('poster', models.ImageField(blank=True, null=True, upload_to=music.models.album_poster_path, verbose_name='Album image')),
                ('release_date', models.DateField(blank=True, help_text='Please use the following format: <em>YYYY-MM-DD</em>.', null=True, verbose_name='Release date')),
                ('rate', models.FloatField(default=5.0, help_text='Please enter an float value (range 1.0 - 10.0)', null=True, validators=[django.core.validators.MinValueValidator(1.0), django.core.validators.MaxValueValidator(10.0)], verbose_name='Rating')),
            ],
        ),
        migrations.CreateModel(
            name='Band',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Band name')),
                ('desc', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('poster', models.ImageField(blank=True, null=True, upload_to=music.models.band_poster_path, verbose_name='Band poster')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter a song genre (e.g. rock, electro, punk...)', max_length=50, unique=True, verbose_name='Genre name')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Song',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Title')),
                ('poster', models.ImageField(blank=True, null=True, upload_to=music.models.poster_path, verbose_name='Song image')),
                ('music', models.FileField(blank=True, null=True, upload_to=music.models.attachment_path, verbose_name='Song file')),
                ('release_date', models.DateField(blank=True, help_text='Please use the following format: <em>YYYY-MM-DD</em>.', null=True, verbose_name='Release date')),
                ('length', models.IntegerField(blank=True, help_text='Please enter an integer value (minutes)', null=True, verbose_name='Length')),
                ('rate', models.FloatField(default=5.0, help_text='Please enter an float value (range 1.0 - 10.0)', null=True, validators=[django.core.validators.MinValueValidator(1.0), django.core.validators.MaxValueValidator(10.0)], verbose_name='Rating')),
                ('band', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='music.band', verbose_name='Band')),
                ('genres', models.ManyToManyField(help_text='Select a genre for this song', to='music.Genre')),
            ],
            options={
                'ordering': ['-release_date', 'title', 'rate'],
            },
        ),
        migrations.CreateModel(
            name='Playlist',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('plot', models.TextField(blank=True, null=True, verbose_name='Playlist description')),
                ('song', models.ManyToManyField(help_text='Select songs for your playlist', to='music.Song')),
            ],
        ),
        migrations.CreateModel(
            name='Attachment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Title')),
                ('last_update', models.DateTimeField(auto_now=True)),
                ('file', models.FileField(null=True, upload_to=music.models.attachment_path, verbose_name='File')),
                ('type', models.CharField(blank=True, choices=[('audio', 'Audio'), ('image', 'Image'), ('text', 'Text'), ('video', 'Video'), ('other', 'Other')], default='image', help_text='Select allowed attachment type', max_length=5, verbose_name='Attachment type')),
                ('album', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='music.album')),
                ('song', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='music.song')),
            ],
            options={
                'ordering': ['-last_update', 'type'],
            },
        ),
        migrations.AddField(
            model_name='album',
            name='band',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='music.band', verbose_name='Band'),
        ),
        migrations.AddField(
            model_name='album',
            name='songs',
            field=models.ManyToManyField(blank=True, to='music.Song', verbose_name='Songs'),
        ),
    ]
